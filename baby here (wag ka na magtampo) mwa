// mobilepatientregistration.js
import React, { useState, useEffect } from 'react';
import './mobilepatientregistration.css';
import sampleID from "../../sampleID.png";
import {
  processIDWithOCR,
  isCameraAvailable,
  initializeCamera,
  cleanupCamera,
  captureImageFromVideo
} from '../../services/tesseractOCR';

const MobilePatientRegistration = () => {
  const [formData, setFormData] = useState({
    fullName: '',
    sex: '',
    birthday: '',
    age: '',
    address: '',
    contactNumber: '',
    email: '',
    
    emergencyContactName: '',
    emergencyContactNumber: '',
    emergencyRelationship: '',
    
    idType: '',
    idNumber: ''
  });
  
  const [currentStep, setCurrentStep] = useState(1);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [idScanMode, setIdScanMode] = useState(false);
  const [termsAccepted, setTermsAccepted] = useState(false);
  const [showCameraModal, setShowCameraModal] = useState(false);
  const [cameraStream, setCameraStream] = useState(null);
  const [capturedImage, setCapturedImage] = useState(null);
  const [ocrLoading, setOcrLoading] = useState(false);
  const [cameraError, setCameraError] = useState('');
  const [fieldErrors, setFieldErrors] = useState({});
  const [showValidation, setShowValidation] = useState(false);
  const [currentTime, setCurrentTime] = useState(new Date());

  useEffect(() => {
    window.scrollTo({ top: 0, behavior: 'smooth' });
    
    const timer = setInterval(() => {
      setCurrentTime(new Date());
    }, 1000);
    return () => clearInterval(timer);
  }, [currentStep]);

  const formatTime = (date) => {
    return date.toLocaleTimeString('en-US', {
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit',
      hour12: true
    });
  };

  const formatDate = (date) => {
    return date.toLocaleDateString('en-US', {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    let processedValue = value;

    if (['fullName', 'emergencyContactName', 'address'].includes(name)) {
      processedValue = toTitleCase(value);
    } else if (name === 'email') {
      processedValue = value.toLowerCase();
    } else if (['contactNumber', 'emergencyContactNumber'].includes(name)) {
      processedValue = formatPhoneNumber(value);
    }

    setFormData(prev => {
      const updated = { ...prev, [name]: processedValue };
  
      if (name === 'birthday') {
        updated.age = calculateAge(processedValue);
      }
      
      return updated;
    });

    setError('');

    if (showValidation) {
      setShowValidation(false);
      setFieldErrors({});
    }
  };

  const toTitleCase = (str) => {
    if (!str) return '';
    return str.toLowerCase().replace(/\b\w/g, l => l.toUpperCase());
  };

  const formatPhoneNumber = (value) => {
    const cleaned = value.replace(/\D/g, '');
    const limited = cleaned.slice(0, 11);

    if (limited.length >= 8) {
      return limited.replace(/(\d{4})(\d{3})(\d{4})/, '$1-$2-$3');
    } else if (limited.length >= 5) {
      return limited.replace(/(\d{4})(\d{1,3})/, '$1-$2');
    }
    return limited;
  };

  const cleanPhoneNumber = (value) => {
    return value.replace(/\D/g, '');
  };

  const validatePhoneNumber = (value) => {
    const cleaned = value.replace(/\D/g, '');
    
    if (!cleaned) return 'Contact number is required';
    if (cleaned.length < 11) return 'Contact number must be 11 digits';
    if (cleaned.length > 11) return 'Contact number must be exactly 11 digits';
    if (!cleaned.startsWith('09')) return 'Contact number must start with 09';
    
    return null;
  };

  const validateEmail = (email) => {
    if (!email) return 'Email address is required';
    if (!email.includes('@')) return 'Email must contain @';
    if (!email.match(/\.[a-zA-Z]{2,}$/)) return 'Email must contain a valid domain (e.g., .com, .org)';
    
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email.toLowerCase())) return 'Please enter a valid email format';
    
    return null;
  };

  const validateFullName = (name) => {
    if (!name.trim()) return 'Full name is required';
    const words = name.trim().split(/\s+/);
    if (words.length < 2) return 'Please enter your full name';
    if (/\./.test(name)) return 'Do not use initials (write full middle name instead)';
    return null;
  };

  const validateAddress = (address) => {
    if (!address.trim()) return 'Complete address is required';
    const parts = address.split(' ').map(p => p.trim()).filter(Boolean);
    if (parts.length < 4) {
      return 'Please follow the format: House No., Street, Barangay, City, Province';
    }
    return null;
  };

  const checkCameraPermissions = async () => {
    try {
      const permissions = await navigator.permissions.query({ name: 'camera' });
      
      if (permissions.state === 'denied') {
        setCameraError('Camera access is blocked. Please enable camera permissions in your browser settings and refresh the page.');
        return false;
      }
      
      return true;
    } catch (err) {
      return true;
    }
  };

  const handleIDScanClick = () => {
    setShowCameraModal(true);
    setCameraError('');
  };

  useEffect(() => {
    if (showCameraModal) {
      initializeCameraStream();
    } else {
      cleanupCameraStream();
    }
    
    return () => cleanupCameraStream();
  }, [showCameraModal]);

  const initializeCameraStream = async () => {
  cleanupCamera();

  try {
      const stream = await initializeCamera();
      setCameraStream(stream);
      setCameraError('');

      setTimeout(() => {
        const video = document.getElementById('mobile-camera-feed');
        if (video) {
          video.srcObject = stream;
          video.setAttribute('playsinline', '');
          video.setAttribute('webkit-playsinline', '');
          video.muted = true;
          video.play().catch(console.log);
        }
      }, 100);
    } catch (err) {             
      setCameraStream(null);
      setCameraError(err.message);
      throw err;
    }
  };

  const cleanupCameraStream = () => {
    cleanupCamera(cameraStream);
    setCameraStream(null);
  };

  const handleCaptureID = () => {
    const video = document.getElementById('mobile-camera-feed');
    const imageData = captureImageFromVideo(video);
    setCapturedImage(imageData);
    processIDImageWithOCR(imageData);
  };

  const processIDImageWithOCR = async (imageData) => {
    setOcrLoading(true);
    setIdScanMode(true);
    try {
      const result = await processIDWithOCR(imageData);
      if (result.success && result.name) {
        setFormData((prev) => ({ ...prev, fullName: result.name }));
        setShowCameraModal(false);
        setError('');
        alert('âœ… ID scanned successfully! Name auto-filled.');
      } else {
        setCameraError(result.message);
      }
    } catch (err) {
      console.error('OCR processing error:', err);
      setCameraError('Failed to process ID image. Please try again.');
    } finally {
      setOcrLoading(false);
      setIdScanMode(false);
    }
  };

  const closeCameraModal = () => {
    setShowCameraModal(false);
    setCapturedImage(null);
    setCameraError('');
  };

  const validateStep = (step) => {
    switch (step) {
      case 1:
        return (
          validateFullName(formData.fullName) === null &&
          formData.sex &&
          formData.birthday &&
          validateAddress(formData.address) === null &&
          validatePhoneNumber(formData.contactNumber) === null &&
          validateEmail(formData.email) === null
        );
      case 2:
        return (
          validateFullName(formData.emergencyContactName) === null &&
          validatePhoneNumber(formData.emergencyContactNumber) === null &&
          formData.emergencyRelationship &&
          formData.emergencyContactNumber !== formData.contactNumber
        );
      case 3:
        return (
          formData.fullName &&
          formData.sex &&
          formData.birthday &&
          formData.address &&
          formData.contactNumber &&
          formData.email &&
          formData.emergencyContactName &&
          formData.emergencyContactNumber &&
          formData.emergencyRelationship &&
          termsAccepted
        );
      default:
        return true;
    }
  };

  const nextStep = () => {
    const stepErrors = {};

    if (currentStep === 1) {
      if (!formData.fullName.trim()) {
        stepErrors.fullName = 'Full name is required';
      } else if (validateFullName(formData.fullName)) {
        stepErrors.fullName = validateFullName(formData.fullName);
      }

      if (!formData.sex) stepErrors.sex = 'Select your sex';

      if (!formData.birthday) {
        stepErrors.birthday = 'Select your date of birth';
      } else if (validateAge(formData.birthday)) {
        stepErrors.birthday = validateAge(formData.birthday);
      }

      if (!formData.address.trim()) {
        stepErrors.address = 'Complete address is required';
      } else if (validateAddress(formData.address)) {
        stepErrors.address = validateAddress(formData.address);
      }

      if (!formData.contactNumber) {
        stepErrors.contactNumber = 'Contact number is required';
      } else if (validatePhoneNumber(formData.contactNumber)) {
        stepErrors.contactNumber = validatePhoneNumber(formData.contactNumber);
      }

      if (!formData.email) {
        stepErrors.email = 'Email address is required';
      } else if (validateEmail(formData.email)) {
        stepErrors.email = validateEmail(formData.email);
      }
    }

    if (currentStep === 2) {
      if (!formData.emergencyContactName.trim()) {
        stepErrors.emergencyContactName = 'Emergency contact name is required';
      } else if (validateFullName(formData.emergencyContactName)) {
        stepErrors.emergencyContactName = validateFullName(formData.emergencyContactName);
      }

      if (!formData.emergencyContactNumber) {
        stepErrors.emergencyContactNumber = 'Emergency contact number is required';
      } else if (validatePhoneNumber(formData.emergencyContactNumber)) {
        stepErrors.emergencyContactNumber = validatePhoneNumber(formData.emergencyContactNumber);
      }

      if (!formData.emergencyRelationship) {
        stepErrors.emergencyRelationship = 'Select your relationship';
      }

      if (formData.emergencyContactNumber === formData.contactNumber) {
        stepErrors.emergencyContactNumber = 'Emergency contact number cannot be the same as patient\'s number';
      }
    }

     if (currentStep === 3 && !termsAccepted) {
      stepErrors.termsAccepted = 'Please accept the terms and conditions';
    }

    setFieldErrors(stepErrors);
    setShowValidation(true);

    if (Object.keys(stepErrors).length === 0) {
      if (currentStep < 3) {
        setCurrentStep(currentStep + 1);
        setShowValidation(false);
        setError('');
      } else if (currentStep === 3) {
        handleSubmit();
      }
    }
  };

  const prevStep = () => {
    setCurrentStep(currentStep - 1);
    setError('');
  };

  const generatePatientId = () => {
    const timestamp = Date.now().toString().slice(-6);
    return `PAT${timestamp}`;
  };

  const handleSubmit = async () => {
    if (!termsAccepted) {
      setShowValidation(true);
      return;
    }

    setLoading(true);
    setError('');

    try {
      const calculatedAge = formData.age || calculateAge(formData.birthday);

      const registrationData = {
        name: formData.fullName,
        birthday: formData.birthday,
        age: parseInt(calculatedAge),
        sex: formData.sex,
        address: formData.address,
        contact_no: cleanPhoneNumber(formData.contactNumber),
        email: formData.email.toLowerCase(),
        emergency_contact_name: formData.emergencyContactName,
        emergency_contact_relationship: formData.emergencyRelationship,
        emergency_contact_no: cleanPhoneNumber(formData.emergencyContactNumber),
        preferred_time: new Date().toISOString(),
        created_date: new Date().toISOString().split('T')[0],
        status: 'pending',
        expires_at: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString()
      };

      console.log('Submitting registration data:', registrationData);

      const response = await fetch('http://localhost:5000/api/temp-registration', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        credentials: 'include',
        body: JSON.stringify(registrationData)
      });

      const result = await response.json();

      if (!response.ok) {
        throw new Error(result.error || 'Registration failed');
      }

      console.log('Registration successful:', result);

      const tempRegId = result.temp_id;
      const tempPatientId = result.temp_patient_id;

      sessionStorage.setItem('tempRegId', tempRegId);
      sessionStorage.setItem('tempPatientId', tempPatientId);
      sessionStorage.setItem('patientName', formData.fullName);
      sessionStorage.setItem('patientEmail', formData.email);
      sessionStorage.setItem('registrationSuccess', 'true');

      window.location.href = '/mobile-health-assessment';

    } catch (err) {
      console.error('Registration error:', err);
      setError(err.message || 'Registration failed. Please check your internet connection and try again.');
    } finally {
      setLoading(false);
    }
  };

  const calculateAge = (birthday) => {
    if (!birthday) return '';
    const today = new Date();
    const birthDate = new Date(birthday);

    if (birthDate > today) return '';
    
    let years = today.getFullYear() - birthDate.getFullYear();
    let months = today.getMonth() - birthDate.getMonth();
    let days = today.getDate() - birthDate.getDate();
    
    if (days < 0) {
      months--;
      const lastMonth = new Date(today.getFullYear(), today.getMonth(), 0);
      days += lastMonth.getDate();
    }
    
    if (months < 0) {
      years--;
      months += 12;
    }

    if (years > 120) return 'invalid';

    if (years === 0 && months === 0) {
      return days === 1 ? '1 day old' : `${days} days old`;
    } else if (years === 0) {
      return months === 1 ? '1 month old' : `${months} months old`;
    } else {
      return years;
    }
  };

const validateAge = (birthday) => {
  if (!birthday) return 'Date of birth is required';
  const age = calculateAge(birthday);
  if (age === 'invalid') return 'Enter a valid date of birth';
  if (age === '') return 'Date of birth is invalid';
  return null;
};

  const renderCameraModal = () => {
    if (!showCameraModal) return null;
    return (
      <div className="mobile-cmodal-overlay" onClick={(e) => e.target === e.currentTarget && closeCameraModal()}>
        <div className="mobile-cmodal mobile-camera-modal">
          <div className="mobile-cmodal-header">
            <h3>Scan Philippine ID</h3>
            <button 
              onClick={closeCameraModal}
              className="mobile-cmodal-close"
            >
              <i class="fa-solid fa-xmark"></i>
            </button>
          </div>
          
          <div className="mobile-cmodal-content">
            {cameraError ? (
              <div className="mobile-camera-error">
                <div className="mobile-error-icon"><i class="fa-solid fa-triangle-exclamation"></i></div>
                <p dangerouslySetInnerHTML={{ __html: cameraError}} />
                <div className="mobile-error-actions">
                  <button 
                    onClick={() => {
                      setCameraError('');
                      initializeCameraStream();
                    }}
                    className="mobile-retry-btn"
                  >
                    Try Again
                  </button>
                  <button 
                    onClick={closeCameraModal}
                    className="mobile-cancel-btn"
                  >
                    Enter Manually
                  </button>
                </div>
              </div>
            ) : (
              <>
                <div className="mobile-camera-container">
                  <video
                    id="mobile-camera-feed"
                    autoPlay
                    playsInline
                    webkit-playsinline
                    muted
                    className="mobile-camera-feed"
                  />
                  <div className="mobile-camera-overlay">
                    <div className="mobile-id-frame">
                      <div className="mobile-corner tl"></div>
                      <div className="mobile-corner tr"></div>
                      <div className="mobile-corner bl"></div>
                      <div className="mobile-corner br"></div>
                    </div>
                  </div>
                </div>
                <p className="terminal-camera-instruction">Position your ID within the frame above</p>
                <button
                  onClick={handleCaptureID}
                  disabled={ocrLoading || !cameraStream}
                  className="mobile-capture-btn"
                >
                  Capture ID
                </button>
              </>
            )}
          </div>
        </div>
      </div>
    );
  };

  const renderPersonalDetailsStep = () => (
    <div className="mobile-reg-card mobile-step-transition">
      <div className="mobile-step-header">
        <div className="mobile-step-icon">
          <i className="fa-regular fa-user"></i>
        </div>
        <h3>Personal Information</h3>
        <p>Please provide your basic information</p>
      </div>

      <div className="mobile-input-group">
        <label>Scan ID</label>
        <div className="mobile-scan-helper">Optional: a shortcut to speed up typing your full name</div>
        <div className="mobile-id-scan">
          <img src={sampleID} alt="Sample ID" className="sampleID" />
          <button
            onClick={handleIDScanClick}
            disabled={idScanMode || !isCameraAvailable()}
            className="mobile-id-scan-btn"
          >
            {!isCameraAvailable() ? 'Camera Not Available (HTTPS Required)' :
              idScanMode ? (<><span className="mobile-loading-spinner"></span>Scanning ID...</>) : "Scan ID"}
          </button>
        </div>
      </div>

      <div className="mobile-form-grid two-column">
        <div className="mobile-input-group">
          <label>Full Name</label>
          <input
            type="text"
            name="fullName"
            value={formData.fullName}
            onChange={handleInputChange}
            placeholder="Enter your complete name"
            className={`mobile-reg-form-input ${fieldErrors.fullName ? 'invalid' : ''}`}
            required
          />
          <small className="input-reminder">First Name, Middle Name, Last Name</small>
          {showValidation && fieldErrors.fullName && (
            <small className="error-text">{fieldErrors.fullName}</small>
          )}
        </div>

        <div className="mobile-input-group">
          <label>Sex</label>
          <select
            name="sex"
            value={formData.sex}
            onChange={handleInputChange}
            className={`mobile-reg-form-input ${showValidation && fieldErrors.sex ? 'invalid' : ''}`}
            required
          >
            <option value="" disabled hidden>Select sex</option>
            <option value="Male">Male</option>
            <option value="Female">Female</option>
          </select>
          {showValidation && fieldErrors.sex && (
            <small className="error-text">{fieldErrors.sex}</small>
          )}
        </div>

        <div className="mobile-input-group">
          <label>Date of Birth</label>
          <input
            type="date"
            name="birthday"
            value={formData.birthday}
            onChange={handleInputChange}
            className={`mobile-reg-form-input ${showValidation && fieldErrors.birthday ? 'invalid' : ''}`}
            max={new Date().toISOString().split('T')[0]}
            required
          />
          {showValidation && fieldErrors.birthday && (
            <small className="error-text">{fieldErrors.birthday}</small>
          )}
        </div>

        <div className="mobile-input-group">
          <label>Age</label>
          <input
            type="text"
            value={formData.age ? (typeof formData.age === 'string' && formData.age.includes('old') ? formData.age : `${formData.age} years old`) : ''}
            className="mobile-reg-form-input"
            disabled
            placeholder="Auto-fill"
          />
        </div>

        <div className="mobile-input-group full-width">
          <label>Complete Address</label>
          <input
            type="text"
            name="address"
            value={formData.address}
            onChange={handleInputChange}
            placeholder="House No., Street, Barangay, City, Province"
            className={`mobile-reg-form-input ${fieldErrors.address ? 'invalid' : ''}`}
            required
          />
          {fieldErrors.address && (
            <small className="error-text">{fieldErrors.address}</small>
          )}
        </div>

        <div className="mobile-input-group">
          <label>Contact Number</label>
          <input
            type="tel"
            name="contactNumber"
            value={formData.contactNumber}
            onChange={handleInputChange}
            placeholder="09XX-XXX-XXXX"
            className={`mobile-reg-form-input ${fieldErrors.contactNumber ? 'invalid' : ''}`}
            required
          />
          {fieldErrors.contactNumber && (
            <small className="error-text">{fieldErrors.contactNumber}</small>
          )}
        </div>

        <div className="mobile-input-group">
          <label>Email Address</label>
          <input
            type="email"
            name="email"
            value={formData.email}
            onChange={handleInputChange}
            placeholder="your.email@example.com"
            className={`mobile-reg-form-input ${fieldErrors.email ? 'invalid' : ''}`}
            required
          />
          {fieldErrors.email && (
            <small className="error-text">{fieldErrors.email}</small>
          )}
        </div>  
      </div>
    </div>
  );

  const renderEmergencyContactStep = () => (
    <div className="mobile-reg-card mobile-step-transition">
      <div className="mobile-step-header">
        <div className="mobile-step-icon">
          <i className="fa-regular fa-bell"></i>
        </div>
        <h3>Emergency Contact</h3>
        <p>Provide emergency contact information</p>
      </div>

      <div className="mobile-emergency-banner">
        <div className="mobile-banner-icon">
          <i className="fa-solid fa-bell"></i>
        </div>
        <div className="mobile-banner-content">
          <h4>Important Information</h4>
          <p>This person will be contacted in case of medical emergency</p>
        </div>
      </div>

      <div className="mobile-form-grid">
        <div className="mobile-input-group">
          <label>Emergency Contact Name</label>
          <input
            type="text"
            name="emergencyContactName"
            value={formData.emergencyContactName}
            onChange={handleInputChange}
            placeholder="Full name of emergency contact"
            className={`mobile-reg-form-input ${fieldErrors.emergencyContactName ? 'invalid' : ''}`}
            required
          />
          {fieldErrors.emergencyContactName && (
            <small className="error-text">{fieldErrors.emergencyContactName}</small>
          )}
        </div>

        <div className="mobile-input-group">
          <label>Contact Number</label>
          <input
            type="tel"
            name="emergencyContactNumber"
            value={formData.emergencyContactNumber}
            onChange={handleInputChange}
            placeholder="09XX-XXX-XXXX"
            className={`mobile-reg-form-input ${fieldErrors.emergencyContactNumber ? 'invalid' : ''}`}
            required
          />
          {fieldErrors.emergencyContactNumber && (
            <small className="error-text">{fieldErrors.emergencyContactNumber}</small>
          )}
          {formData.emergencyContactNumber === formData.contactNumber && (
            <small className="error-text">Emergency contact number cannot be the same as patient's number</small>
          )}
        </div>

        <div className="mobile-input-group">
          <label>Relationship</label>
          <select
            name="emergencyRelationship"
            value={formData.emergencyRelationship}
            onChange={handleInputChange}
            className={`mobile-reg-form-input ${showValidation && fieldErrors.emergencyRelationship ? 'invalid' : ''}`}
            required
          >
            <option value="" disabled hidden>Select relationship</option>
            <option value="Parent">Parent</option>
            <option value="Spouse">Spouse/Partner</option>
            <option value="Sibling">Sibling</option>
            <option value="Child">Child</option>
            <option value="Relative">Other Relative</option>
            <option value="Friend">Close Friend</option>
            <option value="Guardian">Legal Guardian</option>
          </select>
          {showValidation && fieldErrors.emergencyRelationship && (
            <small className="error-text">{fieldErrors.emergencyRelationship}</small>
          )}
        </div>
      </div>
    </div>
  );

  const renderReviewStep = () => (
    <div className="mobile-reg-card mobile-step-transition">
      <div className="mobile-step-header">
        <div className="mobile-step-icon">
          <i className="fa-regular fa-clipboard"></i>
        </div>
        <h3>Review & Confirm</h3>
        <p>Please verify your information</p>
      </div>

      <div className="mobile-review-sections">
        <div className="mobile-review-section">
          <h4><i className="fa-solid fa-user"></i> Personal Information</h4>
          <div className="mobile-review-grid">
            <div className="mobile-review-item">
              <label>Full Name:</label>
              <span>{formData.fullName}</span>
            </div>
            <div className="mobile-review-item">
              <label>Age & Sex:</label>
              <span>{formData.age} years old, {formData.sex}</span>
            </div>
            <div className="mobile-review-item">
              <label>Contact Number:</label>
              <span>{formData.contactNumber}</span>
            </div>
            <div className="mobile-review-item">
              <label>Email:</label>
              <span>{formData.email}</span>
            </div>
            <div className="mobile-review-item full-width">
              <label>Address:</label>
              <span>{formData.address}</span>
            </div>
          </div>
        </div>

        <div className="mobile-review-section">
          <h4><i className="fa-solid fa-bell"></i> Emergency Contact</h4>
          <div className="mobile-review-grid">
            <div className="mobile-review-item">
              <label>Name:</label>
              <span>{formData.emergencyContactName}</span>
            </div>
            <div className="mobile-review-item">
              <label>Number:</label>
              <span>{formData.emergencyContactNumber}</span>
            </div>
            <div className="mobile-review-item">
              <label>Relationship:</label>
              <span>{formData.emergencyRelationship}</span>
            </div>
          </div>
        </div>

        {formData.idType && (
          <div className="mobile-review-section">
            <h4><i className="fa-solid fa-id-card"></i> ID Information</h4>
            <div className="mobile-review-grid">
              <div className="mobile-review-item">
                <label>ID Type:</label>
                <span>{formData.idType}</span>
              </div>
              <div className="mobile-review-item">
                <label>ID Number:</label>
                <span>{formData.idNumber}</span>
              </div>
            </div>
          </div>
        )}
      </div>

      <div className="mobile-terms">
        <label className={`mobile-checkbox-label ${showValidation && fieldErrors.termsAccepted ? 'invalid' : ''}`}>
          <input 
            type="checkbox" 
            checked={termsAccepted}
            onChange={(e) => {
              setTermsAccepted(e.target.checked);
              if (e.target.checked) {
                const newErrors = { ...fieldErrors };
                delete newErrors.termsAccepted;
                setFieldErrors(newErrors);
              }
            }}
            className={showValidation && fieldErrors.termsAccepted ? 'invalid' : ''}
          />
          <span>
            I confirm that all information provided is accurate and I agree to the
            <strong> Terms and Conditions</strong> and <strong>Privacy Policy </strong>
            of CliCare Hospital.
          </span>
        </label>
      </div>
    </div>
  );

  const renderNavigationButtons = () => {
    if (currentStep === 3) {
      return (
        <div className="mobile-nav-buttons">
          <button 
            type="button" 
            onClick={prevStep}
            className="mobile-nav-btn secondary"
            disabled={loading}
          >
            <i className="fa-solid fa-less-than"></i>Back
          </button>
          <button 
            type="button"
            onClick={nextStep}
            disabled={loading}
            className="mobile-nav-btn submit"
          >
            Continue<i className="fa-solid fa-greater-than"></i>
          </button> 
        </div>
      );
    }

    return (
      <div className="mobile-nav-buttons">
        {currentStep > 1 ? (
          <button 
            type="button" 
            onClick={prevStep}
            className="mobile-nav-btn secondary"
          >
            <i className="fa-solid fa-less-than"></i>Back
          </button>
        ) : (
          <button
            type="button"
            onClick={() => window.location.href = '/mobile-patient-login'}
            className="mobile-nav-btn home"
          >
            <i className="fa-solid fa-less-than"></i>Back to Home
          </button>
        )}
        <button 
          type="button"
          onClick={nextStep}
          className="mobile-nav-btn primary"
        >
          Continue<i className="fa-solid fa-greater-than"></i>
        </button>
      </div>
    );
  };

  const renderProgressBar = () => (
    <div className="mobile-progress-container">
      <div className="mobile-progress-steps">
        {['Personal', 'Emergency', 'Review'].map((name, index) => {
          const stepNumber = index + 1;
          const isActive = stepNumber === currentStep;
          const isCompleted = stepNumber < currentStep;
          const isLast = index === 2; // Last step (Review)

          return (
            <div key={index} className="mobile-progress-step-item">
              <div className={`mobile-step ${isActive ? 'active' : ''} ${isCompleted ? 'completed' : ''}`}>
                <div className="mobile-step-number">
                  {isCompleted ? <i className="fa-solid fa-check"></i> : stepNumber}
                </div>
                <div className="mobile-step-label">{name}</div>
              </div>
              {!isLast && (
                <div className={`mobile-step-connector ${isCompleted ? 'completed' : ''} ${stepNumber === currentStep ? 'active' : ''}`}></div>
              )}
            </div>
          );
        })}
      </div>
    </div>
  );

  return (
    <div className="mobile-registration-portal">
      <div className="mobile-reg-header">
        <div className="mobile-reg-logo">
          <i className="fa-solid fa-hospital"></i>
        </div>
        <div className="mobile-reg-title">
          <h1>CliCare</h1>
          <p>Patient Registration System</p>
        </div>
        <div className="mobile-hospital-info">
          <p><strong>{formatTime(currentTime)}</strong></p>
          <p>{formatDate(currentTime)}</p>
        </div>
      </div>

      {renderProgressBar()}
      
      <div className="mobile-reg-content">
        {currentStep === 1 && renderPersonalDetailsStep()}
        {currentStep === 2 && renderEmergencyContactStep()}
        {currentStep === 3 && renderReviewStep()}
      </div>

      <div className="mobile-nav-container">
        {renderNavigationButtons()}
      </div>

      <div className="mobile-help-footer">
        <div className="mobile-help-section">
          <h4>Need Help?</h4>
          <p>Press the help button or ask hospital staff for assistance</p>
        </div>
      </div>

      {renderCameraModal()}
    </div>
  );
};

export default MobilePatientRegistration;
